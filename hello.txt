```java
import java.util.LinkedList;
import java.util.Queue;

public class BFS {

    // Adjacency list representation of the graph
    private final int numVertices;
    private final LinkedList<Integer>[] adjList;

    public BFS(int numVertices) {
        this.numVertices = numVertices;
        adjList = new LinkedList[numVertices];
        for (int i = 0; i < numVertices; i++) {
            adjList[i] = new LinkedList<>();
        }
    }

    // Add an edge to the graph (undirected)
    public void addEdge(int source, int destination) {
        adjList[source].add(destination);
        adjList[destination].add(source); // For undirected graphs
    }

    // Breadth-First Search traversal
    public void bfs(int startVertex) {
        // Mark all vertices as not visited
        boolean[] visited = new boolean[numVertices];

        // Create a queue for BFS
        Queue<Integer> queue = new LinkedList<>();

        // Mark the current node as visited and enqueue it
        visited[startVertex] = true;
        queue.add(startVertex);
n        while (!queue.isEmpty()) {
            // Dequeue a vertex from queue and print it
            int vertex = queue.poll();
            System.out.print(vertex + " ");

            // Get all adjacent vertices of the dequeued vertex.
            // If an adjacent has not been visited, then mark it visited and enqueue it.
            for (int neighbor : adjList[vertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        System.out.println(); // New line after the traversal
    }


    public static void main(String[] args) {
        // Example Usage:
        int numVertices = 7;
        BFS graph = new BFS(numVertices);

        // Add edges to the graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);
        graph.addEdge(3, 5);
        graph.addEdge(4, 5);
        graph.addEdge(4, 6);


        System.out.println("BFS traversal starting from vertex 0:");
        graph.bfs(0); // Perform BFS starting from vertex 0

        System.out.println("BFS traversal starting from vertex 2:");
        graph.bfs(2);
    }
}
```